<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Quartz原理与实战</title>
    <url>/2022/09/01/Quartz%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="定时任务与基本概念"><a href="#定时任务与基本概念" class="headerlink" title="定时任务与基本概念"></a>定时任务与基本概念</h1><p>在指定的时间，做指定的动作</p>
<img src="/2022/09/01/Quartz%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/2022-09-02-08-57-40.png" class="">

<p>简单启动一个调度器</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class QuartzTest &#123;
    public static void main(String[] args) &#123;

        try &#123;
            &#x2F;&#x2F;从调度器工程获得一个调度器
            Scheduler scheduler &#x3D; StdSchedulerFactory.getDefaultScheduler();

            &#x2F;&#x2F; 启动
            scheduler.start();

            scheduler.shutdown();

        &#125; catch (SchedulerException se) &#123;
            se.printStackTrace();
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>示例代码</strong>，获取scheduler实例对象，启动，然后关闭。<br>当调用StdSchedulerFactory.getDefaultScheduler()获取scheduler实例对象后，在调用scheduler.shutdown()之前，scheduler不会终止，因为还有活跃的线程在执行。</p>
<img src="/2022/09/01/Quartz%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/2022-09-01-15-47-09.png" class="" title="10个线程执行结果">

<span id="more"></span>
<hr>
<p><strong>日期格式类</strong>,用于转变格式</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.text.SimpleDateFormat;
import java.util.Date;

public class DFUtil &#123;
    public static final SimpleDateFormat sdf&#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
    public static String format(Date date)&#123;
        return sdf.format(date);
    &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em>新建一个HelloJob类</em></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HelloJob implements Job &#123;

    @Override
    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;
        System.out.println(&quot;HelloJob.execute&quot;+ DFUtil.format(new Date())+&#39; &#39;+Thread.currentThread().getName());
    &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>测试实例</strong></p>
<p>在调用shutdown()之前，需要给job的触发和执行预留一些时间，比如，你可以调用Thread.sleep(60000)让线程睡眠一段时间。<br>定义一个JobDetail和一个Trigger容器，5秒执行一次，永远执行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void main(String[] args) &#123;

    try &#123;
        &#x2F;&#x2F;从调度器工程获得一个调度器
        Scheduler scheduler &#x3D; StdSchedulerFactory.getDefaultScheduler();

        &#x2F;&#x2F; 启动
        scheduler.start();

        &#x2F;&#x2F; 定义一个作业详情
        JobDetail job&#x3D; JobBuilder.newJob(HelloJob.class)
                .withIdentity(&quot;job1&quot;, &quot;group1&quot;)
                .build();

        &#x2F;&#x2F;触发器定义调度策略
        Trigger trigger&#x3D; TriggerBuilder.newTrigger()
                .withIdentity(&quot;trigger1&quot;, &quot;group1&quot;)
                .startNow()
                .withSchedule(SimpleScheduleBuilder.simpleSchedule()
                        .withIntervalInSeconds(5)
                        .repeatForever())
                .build();

        &#x2F;&#x2F; Tell quartz to schedule the job using our trigger
        scheduler.scheduleJob(job, trigger);

        TimeUnit.SECONDS.sleep(20);

        scheduler.shutdown();

    &#125; catch (SchedulerException se) &#123;
        se.printStackTrace();
    &#125; catch (InterruptedException e) &#123;
        throw new RuntimeException(e);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>执行结果</strong></p>
<img src="/2022/09/01/Quartz%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/2022-09-02-08-27-34.png" class="" title="实例执行结果">

<hr>
<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>一个调度器调度多个触发器，一个触发器只能调度一个任务，一个任务可以被多个触发器调度。</p>
<p>两个触发器调用同一个作业</p>
<img src="/2022/09/01/Quartz%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/2022-09-02-09-13-41.png" class="">

<p>一般一个任务详情关联一个任务job</p>
<img src="/2022/09/01/Quartz%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/2022-09-02-09-35-37.png" class="">

<h2 id="SimpleTrigger"><a href="#SimpleTrigger" class="headerlink" title="SimpleTrigger"></a>SimpleTrigger</h2><p><strong>实例代码</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">JobDetail job&#x3D; JobBuilder.newJob(HelloJob.class)
                   .withIdentity(&quot;job1&quot;, &quot;group1&quot;)
                   .build();

           &#x2F;&#x2F; Trigger the job to run now, and then repeat every 40 seconds
           Trigger trigger&#x3D; TriggerBuilder.newTrigger()
                   .withIdentity(&quot;trigger1&quot;, &quot;group1&quot;)
                   .startNow()
                   .withSchedule(SimpleScheduleBuilder.simpleSchedule()
                           .withIntervalInSeconds(1)
                           .repeatForever())
                   .build();

           Trigger trigger2 &#x3D; TriggerBuilder.newTrigger()
                   .withIdentity(&quot;trigger2&quot;, &quot;group1&quot;)
                   .forJob(&quot;job1&quot;, &quot;group1&quot;)
                   .startNow()
                   .withSchedule(SimpleScheduleBuilder.simpleSchedule()
                           .withIntervalInSeconds(3)
                           .repeatForever())
                   .build();

           &#x2F;&#x2F; Tell quartz to schedule the job using our trigger
           scheduler.scheduleJob(job, trigger);
           scheduler.scheduleJob(trigger2);

           TimeUnit.SECONDS.sleep(3);

           scheduler.shutdown();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>触发器分为四种：<br><strong>SimpleTrigger</strong><br><strong>CronTrigger</strong><br><strong>CalendarIntervalTrigger</strong><br><strong>DailyTimeIntervalTrigger</strong></p>
<img src="/2022/09/01/Quartz%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/2022-09-02-14-04-14.png" class="">

<h2 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a>CronTrigger</h2><p>CronTrigger可以满足工作中大部分需求。<br>一个完整的Cron-Expressions的例子是字符串“0 0 12？* WED“ - 这意味着”每个星期三下午12:00“。</p>
<table>
<thead>
<tr>
<th></th>
<th>秒</th>
<th>分</th>
<th>时</th>
<th>日</th>
<th>月</th>
<th>星期</th>
<th>年</th>
</tr>
</thead>
<tbody><tr>
<td>允许的符号</td>
<td>, - * &#x2F;</td>
<td>, - * &#x2F;</td>
<td>, - * &#x2F;</td>
<td>, - * &#x2F; ?LW</td>
<td>, - * &#x2F;</td>
<td>, - * &#x2F; ?L#</td>
<td>, - * &#x2F;</td>
</tr>
<tr>
<td>允许的值</td>
<td>0-59</td>
<td>0-59</td>
<td>0-23</td>
<td>1-31</td>
<td>0-11</td>
<td>1-7</td>
<td>1970-2199</td>
</tr>
</tbody></table>
<p>月是0-11，从1月到12月。<br>星期是1-7，1是星期天。</p>
<blockquote>
<ul>
<li>‘*‘ &amp;nbsp; 代表所有值。例如，分钟字段中的’*‘代表’每分钟’。</li>
<li>‘?’ &amp;nbsp; ‘日’和’星期’字段可以使用。代表不确定，例如每个月的15日，不确定是周几，可用’?’代替。’* * * 15  * ? *’</li>
<li>‘,’ &amp;nbsp;用于指定其他值，例如’星期几’字段中的’MON’,’WED’,’FRI’表示’星期一’、’星期三’、’星期五’。</li>
<li>‘&#x2F;‘&amp;nbsp;表示指定增量。例如’0&#x2F;5 * * * * * *’表示每5s的第0s执行。（注意，不能超过上限，例如0&#x2F;40，只能在第0s和第40s执行）</li>
<li>‘L’&amp;nbsp;表示最后。例如每个月的最后一天。’* * * ? * L <em>‘表示每月的最后一天。在’星期几’使用表示’周六’如果在星期几加入数字，例如’0 0 0 ? 8 3L 2020’表示2020年9月第三个星期六。’L’还可以指定与最后一天的偏移量。例如’0 0 0 L-3 * ? 2020’表示2020年每月倒数第三天执行。*<em>使用’L’选项时，不要制定列表或者值的范围，例如’1-3’和’L-3’中的’-‘冲突。</em></em></li>
<li>‘W’&amp;nbsp;表示工作日（周一至周五）。指定’15W’表示’离月15日最近的工作日’。在日字段上写’LW’表示每个月最后一个工作日。</li>
<li>‘#’&amp;nbsp;只能用在’星期几’里，例如’6#3’的值表示该月的第三个星期五。如果使用’#’字符，则’星期几’字段里只能有一个表达式。</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>ELEMENT-UI笔记</title>
    <url>/2022/07/29/Element_UI/</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element_ui"></a>element_ui</h2><h3 id="Icon图标"><a href="#Icon图标" class="headerlink" title="Icon图标"></a>Icon图标</h3><p>提供了一套常用的图标集合，直接用i标签集合class来使用：</p>
<pre class="line-numbers language-Vue" data-language="Vue"><code class="language-Vue">&lt;i class&#x3D;&quot;el-icon-edit&quot;&gt;&lt;&#x2F;i&gt;
&lt;i class&#x3D;&quot;el-icon-share&quot;&gt;&lt;&#x2F;i&gt;
&lt;i class&#x3D;&quot;el-icon-delete&quot;&gt;&lt;&#x2F;i&gt;
&lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-search&quot;&gt;搜索&lt;&#x2F;el-button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>e-icon-iconName为官网定义的名称，直接去官网查找对应的图标，修改class属性即可。</p>
<span id="more"></span>

<h3 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h3><p>是Element UI提供的一组常用的操作按钮组件，直接使用已经封装好的el-button，比如：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;el-button&gt;按钮&lt;&#x2F;el-button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>基于button按钮，可以使用type、plain、round、circle属性对按钮进行修饰。<br>type设置按钮样式</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;el-row&gt;
  &lt;el-button&gt;默认按钮&lt;&#x2F;el-button&gt;
  &lt;el-button type&#x3D;&quot;primary&quot;&gt;主要按钮&lt;&#x2F;el-button&gt;
  &lt;el-button type&#x3D;&quot;success&quot;&gt;成功按钮&lt;&#x2F;el-button&gt;
  &lt;el-button type&#x3D;&quot;info&quot;&gt;信息按钮&lt;&#x2F;el-button&gt;
  &lt;el-button type&#x3D;&quot;warning&quot;&gt;警告按钮&lt;&#x2F;el-button&gt;
  &lt;el-button type&#x3D;&quot;danger&quot;&gt;危险按钮&lt;&#x2F;el-button&gt;
&lt;&#x2F;el-row&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>plain可以减弱按钮的背景颜色效果![avatar1]</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;el-row&gt;
    &lt;el-button plain&gt;默认按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;primary&quot; plain&gt;主要按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;success&quot; plain&gt;成功按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;info&quot; plain&gt;信息按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;warning&quot; plain&gt;警告按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;danger&quot; plain&gt;危险按钮&lt;&#x2F;el-button&gt;
&lt;&#x2F;el-row&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/2022/07/29/Element_UI/20220818164409.png" class="">  



<p>round 用来给按钮设置圆角</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;el-row&gt;
    &lt;el-button round&gt;圆角按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;primary&quot; round&gt;主要按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;success&quot; round&gt;成功按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;info&quot; round&gt;信息按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;warning&quot; round&gt;警告按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;danger&quot; round&gt;危险按钮&lt;&#x2F;el-button&gt;
&lt;&#x2F;el-row&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/2022/07/29/Element_UI/20220818164652.png" class="">  

<p>circle</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;el-row&gt;
    &lt;el-button circle&gt;圆角按钮 &lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;primary&quot; circle&gt;主要按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;success&quot; circle&gt;成功按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;info&quot; icon&#x3D;&quot;el-icon-message&quot; circle&gt;信息按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;warning&quot; circle&gt;警告按钮&lt;&#x2F;el-button&gt;
    &lt;el-button type&#x3D;&quot;danger&quot; circle&gt;危险按钮&lt;&#x2F;el-button&gt;
&lt;&#x2F;el-row&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/2022/07/29/Element_UI/20220819091011.png" class="">  


]]></content>
      <tags>
        <tag>VUE学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring cloud微服务</title>
    <url>/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h3 id="微服务产生的背景"><a href="#微服务产生的背景" class="headerlink" title="微服务产生的背景"></a>微服务产生的背景</h3><img src="/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/2022-11-02-11-03-06.png" class="" title="单体应用架构">
<p><strong>单体应用存在的问题</strong>：</p>
<blockquote>
<ul>
<li>随着业务的发展，开发变得越来越复杂。</li>
<li>修改、新增某个功能，需要对整个系统进行测试，重新部署。</li>
<li>一个模块出现问题，很可能导致整个系统崩溃。</li>
<li>多团队同时对数据进行管理，容易产生安全漏洞。</li>
<li>各个模块使用同一种技术框架，局限性太大，很难根据业务选择最适合的技术架构。</li>
<li>模块内容太复杂，如果员工离职，可能需要很长时间才能完成任务交接。</li>
</ul>
</blockquote>
<p>为了解决上述问题，微服务架构应运而生，简单来说，<strong>微服务就是将一个单体应用拆分成若干个小型服务</strong>，协同完成系统功能的一种架构模式，在系统架构层面进行解耦合，将一个复杂问题拆分成若干个简单问题。<br>这样的好处是对于每一个简单问题，开发、维护部署的难度就降低了很多，可以实现自治，可以自主选择最适合的技术框架，提高了项目开发的灵活性。<br>微服务架构不仅是简单的拆分，拆分之后的各个微服务之间还要进行通信，否则就无法协同完成需求。<br>微服务之间只需要制定统一的协议即可，至于每个微服务使用什么技术框架来完成，统统不需要关心。<br>这种松耦合的方式使开发、部署都变得更加灵活，同时系统更容易拓展，降低了开发、运维的难度。</p>
<img src="/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/2022-11-02-11-28-04.png" class="" title="微服务应用架构">

<span id="more"></span>
<h3 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h3><blockquote>
<ul>
<li>各个服务之间实现了<strong>松耦合</strong>，彼此之间不需要关注对方是用什么语言开发，什么技术开发，只需要保证自己的接口可以正常访问即可，通过标准协议访问其他接口即可。</li>
<li>各个微服务之间<strong>独立自治</strong>，只需要专注于做好自己的业务，开发和维护不会影响到其他的微服务。</li>
<li>微服务是一种<strong>去中心化</strong>的架构方式，相当于用零件拼接一台机器，如果某个零件出现问题，可以随时进行替换，从而保证机器的正常运行。</li>
</ul>
</blockquote>
<h3 id="微服务的不足"><a href="#微服务的不足" class="headerlink" title="微服务的不足"></a>微服务的不足</h3><blockquote>
<ul>
<li>如果某个系统的远程调用出现问题,导致微服务不可用，就有可能产生级联反应，造成整个系统的崩溃。</li>
<li>如果某个需求需要调用多个微服务，如何来保证数据的一致性。</li>
<li>相比较与单体应用，微服务的学习难度会增加，对于新加入团队的员工来讲，如何快速掌握上手微服务架构，是一个问题。</li>
</ul>
</blockquote>
<h3 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h3><p>从大到小，提炼出核心需求，搞清楚服务间的交互关系，先拆分成粒度较大的服务，然后再根据具体的业务需求逐步细化服务粒度，最终形成一套合理的微服务系统架构。</p>
<ul>
<li>服务粒度不能太小也不能太大，提炼核心需求，根据服务间的交互关系找到最合理的服务粒度。</li>
<li>各个微服务的功能和职责尽量单一，避免出现多个服务处理同一个需求。</li>
<li>各个微服务之间要相互独立、自治，自主开发、自主测试、自主部署、自主维护。</li>
<li>保证数据的独立性，各个微服务独立管理其业务模型下的数据。</li>
<li>使用RESTful协议完成微服务之间的写作任务，数据交互采用JSON格式，方便调用和整合。</li>
</ul>
<img src="/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/2022-11-03-10-01-32.png" class="" title="微服务架构">

<h3 id="微服务架构的核心组件"><a href="#微服务架构的核心组件" class="headerlink" title="微服务架构的核心组件"></a>微服务架构的核心组件</h3><ul>
<li>服务治理<ul>
<li>服务注册</li>
<li>服务发现</li>
</ul>
</li>
</ul>
<p>提供服务的叫做服务提供者。调用服务的叫做服务消费者。</p>
<ul>
<li>服务负载均衡</li>
<li>服务网关</li>
<li>微服务容错机制</li>
<li>分布式配置</li>
<li>服务监控</li>
</ul>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>Spring Cloud<br>微服务是一种分布式软件架构设计方式，具体的落地方案有很多，Dubbo、Spring Boot&#x2F;Spring Cloud、Motan等等，Spring Cloud基于Spring Boot使得整体的开发、配置、部署都非常方便，可以快速搭建基于微服务的分布式应用，Spring Cloud相当于微服务各个组件的集大成者。</p>
<h3 id="Spring-Boot和Spring-Cloud的关系"><a href="#Spring-Boot和Spring-Cloud的关系" class="headerlink" title="Spring Boot和Spring Cloud的关系"></a>Spring Boot和Spring Cloud的关系</h3><p>Spring Boot快速搭建基础系统，Spring Cloud在此基础上实现分布式系统中的公共组件，如服务注册、服务发现、配置管理、熔断器、控制总线等，服务调用方式是基于REST API。</p>
<img src="/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/2022-11-03-11-24-58.png" class="" title="Spring Cloud组件">

<hr>
<h3 id="搭建微服务系统的核心中枢"><a href="#搭建微服务系统的核心中枢" class="headerlink" title="搭建微服务系统的核心中枢"></a>搭建微服务系统的核心中枢</h3><p>服务治理的核心组件：</p>
<ul>
<li>服务提供者</li>
<li>服务消费者</li>
<li>注册中心</li>
</ul>
<p>分布式系统架构中，每个微服务在启动时，将自己的信息存储再注册中心，<strong>服务注册</strong>。  </p>
<p>服务消费者从注册中心查询服务提供者的网络信息，并通过此信息调用服务提供者的接口，<strong>服务发现</strong>。  </p>
<p>注册中心管理各个微服务：通过<strong>心跳机制</strong>，每隔一定的时间微服务会向注册中心进行汇报，如果注册中心长时间无法与某个微服务通信，就会自动销毁该服务。  </p>
<p>当某个微服务的网络信息发生变化是，也会重新注册。</p>
<p>服务提供者、服务消费者、注册中心的关联：</p>
<ul>
<li>启动注册中心</li>
<li>服务提供者启动时，在注册中心可注册一个可以提供服务的实例。</li>
<li>服务消费者启动，在注册中心订阅需要调用的服务。</li>
<li>注册中心将服务提供者的信息推送给服务消费者。</li>
<li>服务消费者通过相关信息（IP、端口）调用服务提供者的服务。</li>
</ul>
<p><strong>注册中心核心模块</strong>：</p>
<ul>
<li>服务注册表</li>
<li>服务注册</li>
<li>服务发现</li>
<li>服务检查（通过心跳机制完成各个微服务之间的通信）</li>
</ul>
<p>Spring Cloud的服务治理可以使用<strong>Eureka</strong>组件。</p>
<p><strong>什么是Eureka？</strong></p>
<blockquote>
<p>Spring Cloud Eureka，提供服务注册和服务发现的功能。</p>
</blockquote>
<h3 id="Spring-Cloud-Eureka的组成"><a href="#Spring-Cloud-Eureka的组成" class="headerlink" title="Spring Cloud Eureka的组成"></a>Spring Cloud Eureka的组成</h3><p>Eureka Server 服务端<br>Eureka Client 客户端</p>
<img src="/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/2022-11-03-15-46-30.png" class="" title="Eureka">

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol>
<li>创建Maven父工程，pom.xml</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.sfx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Greenwich.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在父工程目录下创建Module，实现Eureka Server，pom.xml。</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>application.yml</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:
  port: 8761
eureka:
  client:
#    是否将当前的eureka服务作为客户端注册进去（是否注册自己）
    register-with-eureka: false
#    获取其他eureka数据信息
    fetch-registry: false
    service-url:
      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>创建启动类</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.sfx;


import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication &#123;
    public static void main(String[] args) &#123;
        SpringApplication.run(EurekaServerApplication.class,args);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>启动，访问 <a href="http://localhost:8761/">http://localhost:8761</a> ,可以看到如下界面，启动成功。</li>
</ol>
<img src="/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/2022-11-03-23-45-29.png" class="" title="启动页面">

<hr>
<h3 id="注册第一个微服务"><a href="#注册第一个微服务" class="headerlink" title="注册第一个微服务"></a>注册第一个微服务</h3><p>服务提供者和服务消费者都是通过Eureka Client连接到Eureka Server完成注册。  </p>
<p>1.创建Modelu，实现Eureka Clinet。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>application.yml</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:
  port: 8010
spring:
  application:
    name: provider

eureka:
  client:
    service-url:
      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;
instance:
#      是否注册ip地址
    prefer-ip-address: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>创建启动类</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.sfx;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProviderApplication &#123;
    public static void main(String[] args) &#123;
        SpringApplication.run(ProviderApplication.class,args);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>创建实体类</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.sfx.entity;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class Student &#123;
    private Integer id;
    private String name;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>创建Repository</li>
</ol>
<p>接口</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.sfx.repository;

import com.sfx.entity.Student;

import java.util.Collection;

public interface StudentRepository &#123;
    public Collection&lt;Student&gt; findAll();
    public Student findById(Integer id);
    public void saveOrUpdate(Student student);
    public void deleteById(Integer id);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实现类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.sfx.repository.impl;

import com.sfx.entity.Student;
import com.sfx.repository.StudentRepository;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

@Repository
public class StudentRepositoryImpl implements StudentRepository &#123;

    private static Map&lt;Integer,Student&gt; map;
    static &#123;
        map &#x3D; new HashMap&lt;&gt;();
        map.put(1,new Student(1,&quot;张三&quot;));
        map.put(2,new Student(2,&quot;李四&quot;));
        map.put(3,new Student(3,&quot;王五&quot;));
    &#125;

    @Override
    public Collection&lt;Student&gt; findAll() &#123;
        return map.values();
    &#125;

    @Override
    public Student findById(Integer id) &#123;
        return map.get(id);
    &#125;

    @Override
    public void saveOrUpdate(Student student) &#123;
        map.put(student.getId(),student);
    &#125;

    @Override
    public void deleteById(Integer id) &#123;
        map.remove(id);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>StudentHandler</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.sfx.controller;

import com.sfx.entity.Student;
import com.sfx.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Collection;

@RestController
@RequestMapping(&quot;&#x2F;provider&quot;)
public class StudentHandler &#123;
    @Autowired
    private StudentRepository studentRepository;
    
    @GetMapping(&quot;&#x2F;findAll&quot;)
    public Collection&lt;Student&gt; findAll()&#123;
        return studentRepository.findAll();
    &#125;
    
    @GetMapping(&quot;&#x2F;findById&#x2F;&#123;id&#125;&quot;)
    public Student findById(@PathVariable(&quot;id&quot;) Integer id)&#123;
        return studentRepository.findById(id);
    &#125;
    
    
    @PostMapping(&quot;&#x2F;save&quot;)
    public void save(@RequestBody Student student)&#123;
        studentRepository.saveOrUpdate(student);
    &#125;
    
    @PutMapping(&quot;&#x2F;update&quot;)
    public void update(@RequestBody Student student)&#123;
        studentRepository.saveOrUpdate(student);
    &#125;
    
    @DeleteMapping(&quot;&#x2F;deleteById&#x2F;&#123;id&#125;&quot;)
    public void deleteById(@PathVariable(&quot;id&quot;) Integer id)&#123;
        studentRepository.deleteById(id);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接口测试</p>
<img src="/2022/11/02/Spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1/2022-11-04-01-57-20.png" class="" title="接口测试">

<hr>
<h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p>通过RestTemplate可以实现不同微服务之间的调用。  </p>
<p><strong>RestTemplate</strong>是Spring框架提供的一种基于RESTful的服务组件，底层对HTTP请求及相应进行了封装，提供了很多访问远程REST服务的方法，可以简化代码的开发。</p>
<h3 id="如何使用RestTemplate"><a href="#如何使用RestTemplate" class="headerlink" title="如何使用RestTemplate"></a>如何使用RestTemplate</h3>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记</title>
    <url>/2022/07/30/Spring%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h2><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol>
<li>创建Maven工程，pom.xml导入依赖</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在resources路径下创建spring.xml</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>IoC容器通过读取sping.xml文件，加载bean标签来创建文件</li>
<li>调用API获取IoC容器中所存在的对象</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">ApplicationContext applicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;spirng.xml&quot;);
Student student &#x3D; (Student)applicationContext.getBean(&quot;student&quot;);
System.out.println(student);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h3 id="IoC容器创建bean的两种方式"><a href="#IoC容器创建bean的两种方式" class="headerlink" title="IoC容器创建bean的两种方式"></a>IoC容器创建bean的两种方式</h3><ul>
<li>无参构造函数</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>给成员变量赋值</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>有参构造函数</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>网速<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="从IoC容器中取bean"><a href="#从IoC容器中取bean" class="headerlink" title="从IoC容器中取bean"></a>从IoC容器中取bean</h3><ul>
<li><p>通过id取值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">Student student &#x3D; (Student)applicationContext.getBean(&quot;student&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>通过类型取值，当IoC容器中同时存在两个以上Student Bean的时候，会抛出异常</p>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java">Student student &#x3D; (Student)applicationContext.getBean(Student.class);
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="bean的属性中如果包含有特殊字符，如下处理即可"><a href="#bean的属性中如果包含有特殊字符，如下处理即可" class="headerlink" title="bean的属性中如果包含有特殊字符，如下处理即可"></a>bean的属性中如果包含有特殊字符，如下处理即可</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Classes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span> <span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[&lt;一班>]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="IoC-DI"><a href="#IoC-DI" class="headerlink" title="IoC DI"></a>IoC DI</h3><p>DI指bean之间的依赖注入，设置对象之间的级联关系。</p>
<p>Classes</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data
public class Classes &#123;
    private Integer id;
    private String name;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Student</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data
@AllArgsConstructor
@NoArgsConstructor
public class Student &#123;
    private Integer id;
    private String name;
    private Integer age;
    private Classes classes;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Spring-di.xml</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Classes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>一班<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>bean之间的级联需要ref属性完成映射，不能使用value，否则会抛出类型转换异常</p>
<p>classes</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
@Data
public class Classes &#123;
    private Integer id;
    private String name;
    private List&lt;Student&gt; studentList;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>spring-di.xml</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Classes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span> <span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[&lt;一班>]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentList<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--        &lt;property name="classes" ref="classes">&lt;/property>--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Spring中的bean"><a href="#Spring中的bean" class="headerlink" title="Spring中的bean"></a>Spring中的bean</h3><p>bean是根据scope来生成，表示bean的作用域，scope有四种类型：</p>
<ul>
<li>singleton 单例，表示通过Spring容器获取的对象是唯一的，默认值。</li>
<li>prototype，原型，表示通过Spring容器获取的对象是不同的。</li>
<li>request，请求，表示在一次HTTP请求内有效。</li>
<li>session，会话，表示一个用户会话内有效。</li>
</ul>
<p>request和session适用于web项目。<br>singleton模式下，只要加载IoC容器，无论是否从IoC中取出bean，配置文件中的bean都会被创建，对象永远只有一个。</p>
<p>prototype模式下，如果不从IoC中取bean，则不创建对象，取一次创建一个对象，取多次bean创建多次。</p>
<h3 id="Spring的继承"><a href="#Spring的继承" class="headerlink" title="Spring的继承"></a>Spring的继承</h3><p>Spring的继承不同于Java中的继承，区别：java中的继承针对于类的，Spring的继承是针对于对象（bean）。</p>
<p>Spring的继承中，子bean可以继承父bean中所有成员变量的值。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.User<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过设置bean标签 parent属性建立继承关系，同时子bean可以覆盖父bean的属性值。<br>Spring的继承是针对对象的，所以子bean和父bean并不属于同一个数据类型，只要其成员变量列表一致即可。</p>
<h3 id="Spring的依赖"><a href="#Spring的依赖" class="headerlink" title="Spring的依赖"></a>Spring的依赖</h3><p>用来设置两个bean之间的创建顺序。<br>IoC容器默认情况下是通过spring.xml中bean的配置顺序来决定创建顺序的，配置在前面的bean会先创建。<br>再不更改spring.xml配置顺序的前提下，通过设置bean之间的依赖关系，来调整bean的创建顺序。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Account<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.User<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述代码的结果是先创建User，在创建Account。</p>
<h3 id="Spring读取外部资源"><a href="#Spring读取外部资源" class="headerlink" title="Spring读取外部资源"></a>Spring读取外部资源</h3><p>实际开发中，数据库的配置会单独保存到后缀名为properties的文件中，方便维护和修改，如果使用spring来加载数据源，就需要在spring.xml中读取properties中的数据，这就是读取外部数据。</p>
<p>jdbc.properties</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">user &#x3D; root
password &#x3D; root
url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;library
driverName &#x3D; com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Spring-p-命名空间"><a href="#Spring-p-命名空间" class="headerlink" title="Spring p 命名空间"></a>Spring p 命名空间</h3><p>p命名空间可以用来简化bean的配置。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Student<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>classes-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classes<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Classes<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>一班<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="Spring工厂方法"><a href="#Spring工厂方法" class="headerlink" title="Spring工厂方法"></a>Spring工厂方法</h3><p>IoC通过工厂模式创建bean有两种方式：</p>
<ul>
<li>静态工厂方法</li>
<li>实例工厂方法</li>
</ul>
<p><strong>区别在于静态工厂不需要实例化，实例工厂需要实例化</strong></p>
<p>静态工厂方法</p>
<ol>
<li>创建Car类</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data
@AllArgsConstructor
public class Car &#123;
    private Integer num;
    private String brand;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>创建静态工厂类、静态工厂方法</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class StacticCarFactory &#123;
    private static Map&lt;Integer, Car&gt; carMap;
    static &#123;
        carMap &#x3D; new HashMap&lt;&gt;();
        carMap.put(1,new Car(1,&quot;奥迪&quot;));
        carMap.put(2,new Car(2,&quot;奥拓&quot;));
    &#125;
    public static Car getCar(Integer num)&#123;
        return carMap.get(num);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>spring.xml</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.factory.StacticCarFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getCar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>factory-method指向静态方法<br>constructor-arg的value属性是调用静态方法传入的参数</p>
<p>实例方法</p>
<ol>
<li>创建实例工厂类、工厂方法</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class InstanceCarFactory &#123;
    private Map&lt;Integer, Car&gt; carMap;
    public InstanceCarFactory()&#123;
        carMap &#x3D; new HashMap&lt;&gt;();
        carMap.put(1,new Car(1,&quot;奥迪&quot;));
        carMap.put(2,new Car(2,&quot;奥拓&quot;));
    &#125;
    public Car getCar(Integer num)&#123;
        return carMap.get(num);
    &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>spring.xml</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    实例工厂--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceCarFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.factory.InstanceCarFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--    通过实例工厂获取Car--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceCarFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getCar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>区别：<br>静态工厂方法创建Car对象，不需要实例化工厂对象，因为静态工厂的静态方法，不需要创建对象即可调用，spring-xml中只需要配置一个bean，即最终的结果Car即可。</p>
<p>实例工厂方法创建Car对象。需要实例化工厂对象，因为getCar方法是非静态的，就必须通过实例化对象才能调用，所以必须创建工厂对象，spring.xml中需要配置两个bean，一个是工厂bean，一个是Car bean。</p>
<p>spring.xml中<strong>class + factory-method</strong>的形式是直接调用类中的工厂方法</p>
<p>spring.xml中<strong>factory-bean + factory-method</strong>的形式是调用工厂bean中的工厂方法，就必须先创建工厂bean。</p>
<h3 id="Spring-IoC自动装载-autowire"><a href="#Spring-IoC自动装载-autowire" class="headerlink" title="Spring IoC自动装载 autowire"></a>Spring IoC自动装载 autowire</h3><p>自动装载是spring提供的一种更加简便的方式来完成DI，不需要手动配置property。IoC容器会自动选择bean完成注入。</p>
<p>自动装置有两种方式：</p>
<ul>
<li>byName，通过属性名来完成自动装载</li>
<li>bytype, 通过属性类型对应的数据类型完成自动装载。</li>
</ul>
<p>byName的操作方式</p>
<ol>
<li>创建person实体类</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data
public class person &#123;
    private Integer Id;
    private String name;
    private Car car;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在spring.xml中配置Car和Person对应的bean，并且通过自动装载完成依赖注入</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>奥迪<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>byType的操作方式</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>奥迪<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用byType进行自动装载时，必须保证IoC中只有一个符合条件的bean，否则会抛出异常信息。</p>
<h3 id="Spring-IoC基于注解的开发"><a href="#Spring-IoC基于注解的开发" class="headerlink" title="Spring IoC基于注解的开发"></a>Spring IoC基于注解的开发</h3><p>Spring IoC的作用是帮助开发者创建项目中所需要的bean，同时完成bean之间的依赖注入关系，DI。<br>实现该功能有两种方式。</p>
<ul>
<li>基于XML配置。</li>
<li>基于注解。</li>
</ul>
<p>基于注解有两步操作，缺一不可：</p>
<ol>
<li>配置自动扫包</li>
<li>添加注释</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>DI</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data
@Component
public class User &#123;
    private Integer id;
    private String name;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data
@Component(value &#x3D; &quot;myre&quot;)
public class Repository &#123;
    @Autowired
    private User user;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>@Autowired 默认是通过byType进行注入的，如果要改为byName，需要配合Qualifier注解来完成</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowired
@Qualifier(value &#x3D; &quot;us&quot;)
private User user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>表示将IoC中id为ds的bean注入到repository中。<br>实体类中普通的成员变量（String、包装类等）可以通过@value注解进行赋值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data
@Component(value &#x3D; &quot;us&quot;)
public class User &#123;
    @Value(&quot;1&quot;)
    private Integer id;
    @Value(&quot;张三&quot;)
    private String name;

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>等同于spring.xml</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>us<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="实际开发的使用"><a href="#实际开发的使用" class="headerlink" title="实际开发的使用"></a>实际开发的使用</h3><p>实际开发中我们会将程序分为三层：</p>
<ul>
<li>Controller</li>
<li>Service</li>
<li>Repository(DAO)</li>
</ul>
<p>关系 Controller–&gt;Service–&gt;DAO</p>
<p>@Component 注解是将标注的类加载到IoC容器中，实际开发中可以根据业务需求，分别使用@Controller、@Service、@Repository注解来标注控制层类、业务层类、持久层类。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">@Override
public String doRepository(Double score) &#123;
    String result &#x3D; &quot;&quot;;
    if(score&lt;60)&#123;
        result &#x3D; &quot;不及格&quot;;
    &#125;
    if(score&gt;&#x3D;60 &amp;&amp; score&lt;80)
    &#123;
        result &#x3D; &quot;合格&quot;;
    &#125;
    if (score &gt;&#x3D;80)
    &#123;
        result &#x3D; &quot;优秀&quot;;
    &#125;
    return result;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>spring-annotation.xml</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p>AOP (Aspect Oriented Programming) 面向切面编程。<br>OOP（Object Oriented Programming）面向对象编程，用对象化的思想来完成程序。<br>AOP是对OOP的一个补充，是在另外一个维度上抽象出对象。<br>具体是指程序运行时动态地将非业务代码切入到业务代码中，从而实现程序的解耦合，将非业务代码抽象成一个对象，对对象编程就是面向切面编程。</p>
<p>AOP的优点：</p>
<ul>
<li>可以降低模块之间的耦合性</li>
<li>提高代码的复用性</li>
<li>提高代码的维护性</li>
<li>集中管理非业务代码，便于维护</li>
<li>业务代码不受非业务代码影响，逻辑更加清晰</li>
</ul>
<p>通过一个例子来理解AOP</p>
<ol>
<li>创建一个计算器接口 Cal</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface Cal &#123;
    public int add(int num1,int num2);
    public int sub(int num1,int num2);
    public int mul(int num1,int num2);
    public int div(int num1,int num2);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>创建接口的实现类Calimpl</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CalImpl implements Cal &#123;

    @Override
    public int add(int num1, int num2) &#123;
        return num1+num2;
    &#125;

    @Override
    public int sub(int num1, int num2) &#123;
        return num1-num2;
    &#125;

    @Override
    public int mul(int num1, int num2) &#123;
        return num1*num2;
    &#125;

    @Override
    public int div(int num1, int num2) &#123;
        return num1&#x2F;num2;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>日志打印</p>
<ul>
<li>在每个方法开始位置输出参数信息</li>
<li>在每个方法结束位置输出结果信息</li>
</ul>
<p>对于计算器来讲，加减乘除就是业务代码，日志打印就是非业务代码。<br>AOP如何实现？使用动态代理的方式来实现。<br>代理首先应该具备CalImpl的所有功能，并在此基础上，扩展出打印日志的功能。</p>
<ol>
<li>删除CalImpl方法中所有打印日志的代码，只保留业务代码。</li>
<li>创建MyInvocationHandler类，实现InvocationHandler接口，生成动态代理类。</li>
</ol>
<p>动态代理类，需要动态生成，需要获取到委托类的接口信息，根据这些接口信息，动态生成一个代理类，然后再由ClassLoader用来将动态生成的类加载到JVM中</p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据作业调度平台</title>
    <url>/2022/08/29/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="大数据作业调度平台"><a href="#大数据作业调度平台" class="headerlink" title="大数据作业调度平台"></a>大数据作业调度平台</h1><h2 id="任务调度原理与规则"><a href="#任务调度原理与规则" class="headerlink" title="任务调度原理与规则"></a>任务调度原理与规则</h2><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>任务是我们通常想要执行的一系列程序指令的集合</p>
<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>将编写好的任务按照用户期望的时间，预定的需求进行执行。</p>
<h3 id="任务调度规则"><a href="#任务调度规则" class="headerlink" title="任务调度规则"></a>任务调度规则</h3><p>不同的任务调度工具规则不同，例如Azkaban是批量工作流任务调度，Quartz是同步&#x2F;异步任务调度</p>
<h3 id="任务调度需要解决的问题"><a href="#任务调度需要解决的问题" class="headerlink" title="任务调度需要解决的问题"></a>任务调度需要解决的问题</h3><ol>
<li>采用程序来执行，可减少认为的误操作，以免带来不必要的麻烦</li>
<li>解放员工，提高工作效率</li>
<li>某些需求程序比人力更合适，例如每天两天凌晨两点执行数据同步</li>
<li>可追溯，异常及时通知等等</li>
</ol>
<span id="more"></span>

<h2 id="常见的几种任务调度工具"><a href="#常见的几种任务调度工具" class="headerlink" title="常见的几种任务调度工具"></a>常见的几种任务调度工具</h2><img src="/2022/08/29/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0/2022-08-29-08-50-40.png" class="" title="任务调度平台对比">

<h3 id="Hamake"><a href="#Hamake" class="headerlink" title="Hamake"></a>Hamake</h3><p>Hadoop Make Utility，更新独立数据集的作业可以并发执行，利用Hadoop集群的全部容量。依赖关系图可能包括循环，导致依赖关系循环，可以使用数据集版本控制来解决。</p>
<h3 id="Oozie"><a href="#Oozie" class="headerlink" title="Oozie"></a>Oozie</h3><p>基于工作流引擎的开源框架，是用于Hadoop平台的开源的工作流调度引擎，是用来管理Hadoop作业，属于web应用程序，由Oozie clinet和Oozie Server两个组件构成，Oozie Server两个组件构成。Oozie Serve运行于Tomcat中的web程序。</p>
<h3 id="Azkaban"><a href="#Azkaban" class="headerlink" title="Azkaban"></a>Azkaban</h3><p>例Azkaban是批量工作流任务调度,主要用于在一个工作流内以一个特定的顺序运行一组工作和流程。Azkaban使用job配置文件建立人物之间的依赖关系，并提供一个易于使用的web用户界面维护和跟踪工作流。</p>
<h3 id="Cascading"><a href="#Cascading" class="headerlink" title="Cascading"></a>Cascading</h3><p>Cascading是一个数据处理的API和查询处理计划，用于定义，共享数据处理工作流，还能在单一计算节点或分布式计算集群上执行数据处理工作流。</p>
<h2 id="Azkaban工具介绍"><a href="#Azkaban工具介绍" class="headerlink" title="Azkaban工具介绍"></a>Azkaban工具介绍</h2><p>架构：<br>ExecutorServer可能是个集群<br>DB是集群中所有节点运行共用用的数据存储，包含作业信息、各种调度元数据等。<br>Developer提交工作流<br>工作流也可以嵌入到工作流中</p>
<img src="/2022/08/29/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0/2022-08-29-13-50-42.png" class="" title="Azkaban">

<p>组件介绍：<br><strong>Azkaban WebServer</strong><br>Azkaban WebServer是整个调度集群的核心，负责所有作业的管理和调度。<br><strong>Azkaban ExecutorServer</strong><br>Azkaban ExecutorServer，整个调度集群中实际运行作业的节点</p>
]]></content>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>数据湖与数据仓库</title>
    <url>/2022/08/30/%E6%95%B0%E6%8D%AE%E6%B9%96%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="数据湖"><a href="#数据湖" class="headerlink" title="数据湖"></a>数据湖</h1><p>数据湖是一种数据存储结构，可以存储<strong>任何类型的数据</strong>，包括像图片文档这样的非结构化数据，数据湖通常更大，成本更为廉价。存储其中的数据不需要满足特定的schema，数据湖也不会尝试去将特定的schema施行其上。相反的是，数据的拥有者通常会在读取数据的时候解析schema（schema-on-read），当处理相应的数据时，将转换施加其上。</p>
<p>ODS和数据湖有两个共同的重要特征：不加转换的原始数据，可以进行不预先设置的分析。ODS一般用来存储业务运营数据，也就是OLTP（联机事务处理）数据的快照和历史，而数据仓库一般用来存储分析数据，对应OLAP（联机分析处理）需求。</p>
<ul>
<li>存储海量的原始数据</li>
<li>支持任意的数据格式（结构化、半结构化、非结构化）</li>
<li>较强的分析和处理能力</li>
</ul>
<span id="more"></span>

<h1 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h1><p>它主要存储的是<strong>以关系型数据库组织起来的结构化数据</strong>。数据通过转换、整合以及清理，并导入到目标表中。在数仓中，数据存储的结构与其定义的schema是强匹配的。</p>
<ul>
<li>面向主题：按照一定的主题域进行组织。主题是指用户使用数据仓库进行决策时所关心的重点方面，一个主题通常与多个操作型信息系统相关</li>
<li>不可更新：数据仓库主要是为决策分析提供数据，所涉及的操作主要是数据的查询</li>
<li>非规范化：数据可以是而且经常是冗余的</li>
<li>大容量：时间序列数据集合通常都非常大</li>
<li>效率高：通过表结构优化、存储优化等手段，提升查询效率</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>数据仓库</th>
<th>数据湖</th>
</tr>
</thead>
<tbody><tr>
<td>读写模式</td>
<td>写时模式，数据存储前定义Schema</td>
<td>读时模式，读取数据时定义Schema</td>
</tr>
<tr>
<td>数据价值</td>
<td>提前明确</td>
<td>无须提前明确</td>
</tr>
<tr>
<td>存储数据类型</td>
<td>清洗后的结构化数据</td>
<td>原始数据、非结构化和半结构化数据</td>
</tr>
<tr>
<td>容量扩展成本</td>
<td>中等成本</td>
<td>低成本</td>
</tr>
<tr>
<td>支持功能</td>
<td>统计、报表和传统 BI分析</td>
<td>敏捷数据集成，支持编程框架</td>
</tr>
<tr>
<td>构建成本</td>
<td>重量级，时间成本高、投资规模大</td>
<td>轻量级，比较灵活，成本低</td>
</tr>
</tbody></table>
<p>数据仓库中的数据由原始数据经过清理、填充和转换后按照核心业务逻辑组织生成。</p>
<img src="/2022/08/30/%E6%95%B0%E6%8D%AE%E6%B9%96%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/2022-08-30-14-15-19.png" class="">

]]></content>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/2022/10/09/Spring-MVC/</url>
    <content><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p>Spring MVC是Spring Framework提供的Web组件，全称是Spring Web MVC，是目前主流的实现MVC设计模式的框架，提供前端路由映射、视图解析等功能。</p>
<h3 id="Spring-MVC功能"><a href="#Spring-MVC功能" class="headerlink" title="Spring MVC功能"></a>Spring MVC功能</h3><p>MVC：Controller（控制层）、Modedl（模型层）、View（视图层）<br>流程：Controller接收客户端请求，调用相关业务层组件产出Model，获取业务数据并返回给Controller，Controller再结合View完成业务数据的视图层渲染，并将结果响应给客户端。</p>
<img src="/2022/10/09/Spring-MVC/2022-10-09-19-26-22.png" class="" title="MVC流程">
<p>Spring MVC对这套MVC流程进行封装，帮助开发者屏蔽底层代码，并且开放出相关接口供开发者调用，让MVC开发变得更加简单方便。</p>
<h3 id="Spring-MVC实现原理"><a href="#Spring-MVC实现原理" class="headerlink" title="Spring MVC实现原理"></a>Spring MVC实现原理</h3><h4 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h4><ul>
<li><strong>DispatcherServlet</strong>：前置控制器，负责<strong>调度</strong>其他组件的执行，可以降低不同组件之间的耦合性，是整个Spring MVC的核心模块。前端请求映射到具体Handler。</li>
<li><strong>Handler</strong>：处理器，完成具体的业务逻辑，相当于Servlet。</li>
<li><strong>HandlerMapping</strong>：DispatcherServlet是通过HandlerMapping将请求映射到不同的Handler。</li>
<li><strong>Hanglerinterceptor</strong>：处理器拦截器，是一个接口，如果我们需要进行一些拦截处理，可以通过实现该接口完成。</li>
<li><strong>HandlerExecutionChain</strong>：处理器执行链，包括两部分内容：Handler和HandlerInterceptor（系统会有一个默认的HandlerInterceptor，如果需要额外拦截处理，可以通过田间拦截器进行设置）。</li>
<li><strong>HandlerAdapter</strong>：处理器适配器，Handler执行业务方法之前，需要进行一系列的操作包括表单的数据验证、数据类型的转换、将表单数据封装到POJO等，这一系列操作都是由HandlerAdapter完成，DispatcherServlet是通过HandlerAdapter执行不同的Handler。</li>
<li><strong>ModelAndView</strong>：封装了模型数据和视图信息，作为Handler的处理结果，返回给DispatcherServlet。</li>
<li><strong>ViewResolver</strong>：视图解析器，DispatcherServlet通过它将逻辑视图解析为物理视图，最终将渲染的结果响应给客户端。</li>
</ul>
<span id="more"></span>

<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol>
<li>客户端请求被DispatcherServlet接受。</li>
<li>根据HandlerMapping映射到具体的Handler。</li>
<li>生成Handler和HandlerInterceptor。</li>
<li>Handler和HandlerInterceptor以handlerExecutionChain的形式一并返回给DispatcherServlet。</li>
<li>DispatcherServlet通过HandlerAdpater调用Handler的方法完成业务逻辑处理。</li>
<li>返回一个ModelAndView对象给DispatcherServlet。</li>
<li>DispatcherServlet将获取的ModelAndView对象传给ViewResolver视图解析器，将逻辑视图解析问物理视图。</li>
<li>ViewResolver返回一个View对象给DispatcherServlet。</li>
<li>DispatcherServlet根据View进行视图渲染（将模型数据填充到视图中）。</li>
<li>DispatcherServlet将渲染之后的视图响应给客户端。</li>
</ol>
<img src="/2022/10/09/Spring-MVC/2022-10-25-19-25-43.png" class="" title="MVC工作流程图">

<h3 id="Spring-MVC具体使用"><a href="#Spring-MVC具体使用" class="headerlink" title="Spring MVC具体使用"></a>Spring MVC具体使用</h3><ol>
<li>创建一个Maven工程，pom.xml中添加依赖</li>
</ol>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习</title>
    <url>/2022/09/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
